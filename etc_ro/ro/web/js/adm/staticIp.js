/** * Created by hewq on 9/11/17. *//** * mac filter 模块 * @module wifi advance * @class wifi advance */define([ 'underscore', 'jquery', 'knockout', 'config/config', 'service' ], function(_, $, ko, config, service) {    var container,        vm;    var rules;    /**     * macFilterViewModel     * @class macFilterViewModel     */    function staticIpViewModel() {        var self = this;        var info = service.getStaticIpInfo();        service.bindCommonData(self);        service.advanceHide();        self.static_ip_enable = ko.observable(info.staticIPEnable == "" ? "0" : info.staticIPEnable);        self.isShowStaticIpDiv = ko.observable(self.static_ip_enable() == "1");        self.staticIpHandle = function (enable) {            enable == 1 ? $("#staticIpDiv").show() : $("#staticIpDiv").hide();            return true;        };        self.page1 = ko.observable($("#page1").hasClass('active'));        self.page2 = ko.observable($("#page2").hasClass('active'));        self.page3 = ko.observable($("#page3").hasClass('active'));        self.page4 = ko.observable($("#page4").hasClass('active'));        self.ip1 = ko.observable(info.tz_static_ip_0);        self.ip2 = ko.observable(info.tz_static_ip_1);        self.ip3 = ko.observable(info.tz_static_ip_2);        self.ip4 = ko.observable(info.tz_static_ip_3);        self.ip5 = ko.observable(info.tz_static_ip_4);        self.ip6 = ko.observable(info.tz_static_ip_5);        self.ip7 = ko.observable(info.tz_static_ip_6);        self.ip8 = ko.observable(info.tz_static_ip_7);        self.ip9 = ko.observable(info.tz_static_ip_8);        self.ip10 = ko.observable(info.tz_static_ip_9);        self.ip11 = ko.observable(info.tz_static_ip_10);        self.ip12 = ko.observable(info.tz_static_ip_11);        self.ip13 = ko.observable(info.tz_static_ip_12);        self.ip14 = ko.observable(info.tz_static_ip_13);        self.ip15 = ko.observable(info.tz_static_ip_14);        self.ip16 = ko.observable(info.tz_static_ip_15);        self.ip17 = ko.observable(info.tz_static_ip_16);        self.ip18 = ko.observable(info.tz_static_ip_17);        self.ip19 = ko.observable(info.tz_static_ip_18);        self.ip20 = ko.observable(info.tz_static_ip_19);        self.mac1 = ko.observable(info.tz_static_mac_0);        self.mac2 = ko.observable(info.tz_static_mac_1);        self.mac3 = ko.observable(info.tz_static_mac_2);        self.mac4 = ko.observable(info.tz_static_mac_3);        self.mac5 = ko.observable(info.tz_static_mac_4);        self.mac6 = ko.observable(info.tz_static_mac_5);        self.mac7 = ko.observable(info.tz_static_mac_6);        self.mac8 = ko.observable(info.tz_static_mac_7);        self.mac9 = ko.observable(info.tz_static_mac_8);        self.mac10 = ko.observable(info.tz_static_mac_9);        self.mac11 = ko.observable(info.tz_static_mac_10);        self.mac12 = ko.observable(info.tz_static_mac_11);        self.mac13 = ko.observable(info.tz_static_mac_12);        self.mac14 = ko.observable(info.tz_static_mac_13);        self.mac15 = ko.observable(info.tz_static_mac_14);        self.mac16 = ko.observable(info.tz_static_mac_15);        self.mac17 = ko.observable(info.tz_static_mac_16);        self.mac18 = ko.observable(info.tz_static_mac_17);        self.mac19 = ko.observable(info.tz_static_mac_18);        self.mac20 = ko.observable(info.tz_static_mac_19);        /**         * 保存设置         * @event save         */        self.save = function() {            var params = {                staticIPEnable: self.static_ip_enable(),                tz_static_mac_0 : self.mac1(),                tz_static_mac_1 : self.mac2(),                tz_static_mac_2 : self.mac3(),                tz_static_mac_3 : self.mac4(),                tz_static_mac_4 : self.mac5(),                tz_static_mac_5 : self.mac6(),                tz_static_mac_6 : self.mac7(),                tz_static_mac_7 : self.mac8(),                tz_static_mac_8 : self.mac9(),                tz_static_mac_9 : self.mac10(),                tz_static_mac_10 : self.mac11(),                tz_static_mac_11 : self.mac12(),                tz_static_mac_12 : self.mac13(),                tz_static_mac_13 : self.mac14(),                tz_static_mac_14 : self.mac15(),                tz_static_mac_15 : self.mac16(),                tz_static_mac_16 : self.mac17(),                tz_static_mac_17 : self.mac18(),                tz_static_mac_18 : self.mac19(),                tz_static_mac_19 : self.mac20(),                tz_static_ip_0 : self.ip1(),                tz_static_ip_1 : self.ip2(),                tz_static_ip_2 : self.ip3(),                tz_static_ip_3 : self.ip4(),                tz_static_ip_4 : self.ip5(),                tz_static_ip_5  : self.ip6(),                tz_static_ip_6  : self.ip7(),                tz_static_ip_7  : self.ip8(),                tz_static_ip_8  : self.ip9(),                tz_static_ip_9  : self.ip10(),                tz_static_ip_10 : self.ip11(),                tz_static_ip_11 : self.ip12(),                tz_static_ip_12 : self.ip13(),                tz_static_ip_13 : self.ip14(),                tz_static_ip_14 : self.ip15(),                tz_static_ip_15 : self.ip16(),                tz_static_ip_16 : self.ip17(),                tz_static_ip_17 : self.ip18(),                tz_static_ip_18 : self.ip19(),                tz_static_ip_19 : self.ip20()            };            showLoading('waiting');            service.setStaticIp(params, function(result) {                if (result.result == "success") {                    // successOverlay();                    showConfirm("reboot_tips", function(){                        showLoading("restarting");                        service.restart({}, function (data) {                            if (data && data.result == "success") {                                successOverlay();                            } else {                                errorOverlay();                            }                        }, $.noop);                    });                } else {                    errorOverlay();                }            });        };        /*self.setStaticIpSwitchInfo = function () {            var switchParams = {                staticIPEnable: self.static_ip_enable()            };            showLoading('waiting');            service.setStaticIpSwitch(switchParams, function (result) {                if (result.result == "success") {                    successOverlay();                } else {                    errorOverlay();                }                container = $('#container');                ko.cleanNode(container[0]);                vm = new staticIpViewModel();                ko.applyBindings(vm, container[0]);            });        };*/        self.pageHandle = function(pageIndex){            changePage(pageIndex);            // container = $('#container');            // ko.cleanNode(container[0]);            // vm = new staticIpViewModel();            // ko.applyBindings(vm, container[0]);        };        self.page1 = ko.observable($("#page1").hasClass('active'));        self.page2 = ko.observable($("#page2").hasClass('active'));        self.page3 = ko.observable($("#page3").hasClass('active'));        self.page4 = ko.observable($("#page4").hasClass('active'));        // check form        self.submitApply = function () {            var ipAddr,                ipMacArr,                hasGateway,                repeatArr = [];            rules = {                mac_1 : 'mac_check',                mac_2 : 'mac_check',                mac_3 : 'mac_check',                mac_4 : 'mac_check',                mac_5 : 'mac_check',                mac_6 : 'mac_check',                mac_7 : 'mac_check',                mac_8 : 'mac_check',                mac_9 : 'mac_check',                mac_10 : 'mac_check',                mac_11 : 'mac_check',                mac_12 : 'mac_check',                mac_13 : 'mac_check',                mac_14 : 'mac_check',                mac_15 : 'mac_check',                mac_16 : 'mac_check',                mac_17 : 'mac_check',                mac_18 : 'mac_check',                mac_19 : 'mac_check',                mac_20 : 'mac_check',                ip_1 : 'ip_check',                ip_2 : 'ip_check',                ip_3 : 'ip_check',                ip_4 : 'ip_check',                ip_5 : 'ip_check',                ip_6 : 'ip_check',                ip_7 : 'ip_check',                ip_8 : 'ip_check',                ip_9 : 'ip_check',                ip_10 : 'ip_check',                ip_11 : 'ip_check',                ip_12 : 'ip_check',                ip_13 : 'ip_check',                ip_14 : 'ip_check',                ip_15 : 'ip_check',                ip_16 : 'ip_check',                ip_17 : 'ip_check',                ip_18 : 'ip_check',                ip_19 : 'ip_check',                ip_20 : 'ip_check'            };            if(!checkFormWithoutMsg( $('#static_ip_mac'), rules ) ){                return false;            }            ipAddr = service.getLanInfo().ipAddress;            ipMacArr = getIptMacVal();            hasGateway = $.inArray(ipAddr, ipMacArr) != -1;            if(hasGateway) {                $('.ip-input').each(function () {                    if($(this).val() == ipAddr){                        $(this).addClass('error2');                    }                });                errorOverlay("gateway_be_static_ip");                return false;            }            repeatArr = getRepeatEleInArr(ipMacArr);            if( repeatArr.length > 0 ){                addEffectForRepeat(repeatArr);                errorOverlay("ip_or_mac_repeat");                return false;            }            self.save();        };        self.saveSwitch = function () {            self.setStaticIpSwitchInfo();        };    }    // 获取所有输入框中ip和mac的值    function getIptMacVal() {        var valArr = [];        $('.ip-input').each(function () {            valArr.push($(this).val());        });        $('.mac-input').each(function () {            valArr.push($(this).val());        });        return valArr;    }    // 为重复的输入框添加提示效果    function addEffectForRepeat(repeatArr) {        var repeatVal;        for(var i = 0; i < repeatArr.length; i++){            repeatVal = repeatArr[i];            $('.ip-input').each(function () {                if($(this).val() == repeatVal){                    $(this).addClass('error2');                }            });            $('.mac-input').each(function () {                if($(this).val() == repeatVal){                    $(this).addClass('error2');                }            });        }    }    function changePage(id){        $(".pageContent").hide();        $(id + "Content").show();        $(".pages").removeClass('active');        $(id).addClass('active');        $('.slide-page').removeClass('disabled');        if(id == '#page1') $('#preview').addClass('disabled');        if(id == '#page4') $('#next').addClass('disabled');        // $('#preview').prop('disabled','');        // $('#next').prop('disabled',false);        $('.disabled').prop('disabled',true);    }    $('.ip-input').live('blur',function () {        var ipMacArr2 = getIptMacVal();        var repeatArr2 = getRepeatEleInArr(ipMacArr2);        $('.ip-input').removeClass('error2');        addEffectForRepeat(repeatArr2);        if ($(this).val() == '') {            $(this).prev('span').html('IP');        }    });    $('.ip-input').live('focus', function () {        if ($(this).prev('span').html() != '') {            $(this).prev('span').html('');        }    });    $('.mac-input').live('blur',function () {        var ipMacArr3 = getIptMacVal();        var repeatArr3 = getRepeatEleInArr(ipMacArr3);        $('.mac-input').removeClass('error2');        addEffectForRepeat(repeatArr3);        if ($(this).val() == '') {            $(this).prev('span').html('MAC');        }    });    $('.mac-input').live('focus', function () {        if ($(this).prev('span').html() != '') {            $(this).prev('span').html('');        }    });    /**     * view model初始化     * @method init     */    function init() {        if(this.init){            getRightNav(ADVANCE_SETTINGS_COMMON_URL);            getInnerHeader(INNER_HEADER_COMMON_URL);        }        container = $('#container');        ko.cleanNode(container[0]);        vm = new staticIpViewModel();        ko.applyBindings(vm, container[0]);        $('.ip-input').focus();        $('.ip-input').blur();        $('.mac-input').focus();        $('.mac-input').blur();        $('#preview').live('click',function () {            var preview = $('li[class="pages active"]')[0].previousElementSibling;            vm.pageHandle("#" + preview.getAttribute('id'));        });        $('#next').live('click',function () {            var nextEle = $('li[class="pages active"]')[0].nextElementSibling;            vm.pageHandle("#" + nextEle.getAttribute('id'));        });       /* $('#static_ip_mac').validate({            submitHandler:function () {                vm.save();            },            rules: rules        });*/        $('#frmStaticIpSwitch').validate({            submitHandler:function () {                vm.setStaticIpSwitchInfo();            }        });    }    return {        init : init    };});